package practice;
// page 234

import tester.Tester;

class CartPt {
  double x;
  double y;
  
  CartPt(double x, double y) {
   this.x = x;
   this.y = y;
  }
  
  public double distanceToOrigin() {
   return Math.sqrt((x * x) + (y * y));
  }

  public double distance(CartPt p) {
    return Math.sqrt(Math.pow((this.x - (p.x)), 2) + Math.pow((this.y - p.y), 2));
  }
  
  //get a new TopLeft point of this CartPt and the given one
   public CartPt topLeft(CartPt p) {
     return new CartPt(Math.min(this.x, p.x), Math.min(this.y, p.y));
   }
}

interface IShape {
  double area();
  double distanceToOrigin();
  IShape grow(int inc);
  boolean isBiggerThan(IShape shape);
  boolean contains(CartPt point);
  BoundingBox bb();
  Rect recBb();
  
  // determines whether this shape is of equal size of the given IShape, 
  // up to some given small number delta
  boolean same(IShape other, double delta);
  
  // determines whether this shape is closer to the origin than some other, given IShape
  // TODO closerTo();
  
  // draws the bounding box around this shape
  // TODO drawBoundary();
}

abstract class AShape implements IShape {  // for Abstraction, can partially implement some of the interface
  CartPt location;
  String colour;
  
  AShape(CartPt location, String colour) {
    this.location = location;
    this.colour = colour;
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public double distanceToOrigin() {
    return location.distanceToOrigin();
  }
  
  // methods not implemented -> abstract
  public abstract double area();
  public abstract IShape grow(int inc);
  public abstract boolean contains(CartPt point);
  
  public boolean same(IShape other, double delta) {
    return (this.area() - other.area()) / this.area() <= Math.abs(delta);
  }
 
}


class Circle extends AShape {  // extends = inherit or get everything inside AShape
  int radius;
  
  Circle(CartPt center, int radius, String colour) {
    super(center, colour);  // super refers to the constructor of the abstract class
    this.radius = radius;
  }
  
  public double area() {
    return Math.PI * radius * radius;
 }
  
  @Override
  public double distanceToOrigin() {  // this overrides distanceToOrigin() from AShape
    return super.distanceToOrigin() - radius;
  }
  
  public IShape grow(int inc) {
    return new Circle(location, radius + inc, colour);
  }
  
  public boolean contains(CartPt point) {
    return location.distance(point)<= radius;
  }
  
  public BoundingBox bb() {
    return new BoundingBox(this.location.x - this.radius, this.location.x + this.radius,
                           this.location.y - this.radius, this.location.y + this.radius);
  }
  
  public Rect recBb() {
    return new Rect(new CartPt(this.location.x - this.radius, this.location.y - this.radius),
                    this.radius * 2, 
                    this.radius * 2, 
                    this.colour);
  }
  
 
}


class Square extends Rect {
  Square(CartPt topLeft, int size, String colour) {
    super(topLeft, size, size, colour);  // invokes the constructor in its superclass, Rect.
  }
  
  // need to override the one from Rect, since it needs to produce an instance of Square
  public IShape grow(int inc) {
    return new Square(location, width + inc, colour);
  }
  
  // the methods area() and contains() for Square are defined in the Rect class
}



class Rect extends AShape {
  int width;
  int height;
  
  Rect(CartPt topLeft, int width, int height, String colour) {
    super(topLeft, colour);
    this.width = width;
    this.height = height;
  }
  
  Rect(CartPt topLeft, double width, double height, String colour) {
    super(topLeft, colour);
    this.width = (int) width;
    this.height = (int) height;
  }

  public double area() { 
    return width * height;
  }
  
  public IShape grow(int inc) {
    return new Rect(location, width + inc, height + inc, colour);
  }

  public boolean contains(CartPt point) {
    return point.x >= location.x && point.x <= location.x + width
        && point.y >= location.y && point.y <= location.y + height;
  }
  
  public BoundingBox bb() {
    return new BoundingBox(this.location.x, this.location.x + this.width,
                           this.location.y, this.location.y + this.height);
  }
  
  public Rect recBb() {
    return this;
  }
  
  public Rect combineRec(Rect rec) {
    return new Rect(this.location.topLeft(rec.location), 
        Math.max(this.xRight(), rec.xRight()) - this.location.topLeft(rec.location).x,
        Math.max(this.yBottom(), rec.yBottom()) - this.location.topLeft(rec.location).y,
        this.colour);
  }

  // produce the x position of the right side of this rectangle
  private double xRight() {
    return this.location.x + this.width;
  }
  
  // produce the y position of the bottom side of this rectangle
  private double yBottom() {
    return this.location.y + this.height;
  }

}


class SuperImp implements IShape {
  IShape bottom;
  IShape top;
  
  SuperImp(IShape bottom, IShape top) {
    this.bottom = bottom;
    this.top = top;
  }

  public double area() {
    return bottom.area() + top.area();
  }

  public double distanceToOrigin() {
    return Math.min(bottom.distanceToOrigin(), top.distanceToOrigin());
  }

  public IShape grow(int inc) {
    return new SuperImp(bottom.grow(inc), top.grow(inc));
  }

  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }

  public boolean contains(CartPt point) {
    return bottom.contains(point) || top.contains(point);
  }
  
  public BoundingBox bb() {
    return this.bottom.bb().combine(this.top.bb());
  }

  public Rect recBb() {
    return this.bottom.recBb().combineRec(this.top.recBb());
  }

  @Override
  public boolean same(IShape other, double delta) {
    // TODO Auto-generated method stub
    return false;
  }
}

class BoundingBox {
  double left;
  double right;
  double top;
  double bottom;
  
  BoundingBox(double left, double right, double top, double bottom) {
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
  }
  
  // combine this bounding box with that one
  BoundingBox combine(BoundingBox that) {
    return new BoundingBox(Math.min(this.left, that.left),
                           Math.max(this.right, that.right),
                           Math.min(this.top, that.top),
                           Math.max(this.bottom, that.bottom));
  }
}

class ExamplesIShape {
  ExamplesIShape() {}
  
  CartPt pt1 = new CartPt(0, 0);
  CartPt pt2 = new CartPt(3, 4);
  CartPt pt3 = new CartPt(7, 1);
  
  IShape s1 = new Square(new CartPt(0, 0), 30, "red");
  IShape s2 = new Square(new CartPt(3, 4), 30, "red");
  IShape s3 = new Square(new CartPt(20, 40), 10, "green");
  IShape s4 = new Square(new CartPt(50, 50), 50, "red");
  IShape s5 = new Square(new CartPt(50, 50), 30, "red");
  
  IShape c1 = new Circle(new CartPt(30, 40), 10, "red");
  IShape c2 = new Circle(new CartPt(50, 50), 30, "red");
  IShape c3 = new Circle(new CartPt(30, 100), 30, "blue");
  
  IShape r1 = new Rect(new CartPt(50, 50), 30, 20, "red");
  IShape r2 = new Rect(new CartPt(50, 50), 50, 40, "red");
  IShape r3 = new Rect(new CartPt(20, 40), 10, 20, "green");
  
  boolean testSame(Tester t) {
    return t.checkExpect(s4.same(s5, 0.0), true)
        && t.checkExpect(s4.same(s5, 10.0), true);
  }
  
  // Tests for CartPt
  boolean testDistToOrigin(Tester t) {
    return t.checkInexact(this.pt1.distanceToOrigin(), 0.0, 0.001) 
        && t.checkInexact(this.pt2.distanceToOrigin(), 5.0, 0.001);
  }
  
  boolean testDistance(Tester t) {
    return t.checkInexact(new CartPt(0, 0).distance(new CartPt(1, 1)), 1.414, 0.01)
        && t.checkInexact(new CartPt(4, 8).distance(new CartPt(1, 4)), 5.0, 0.01);
  }
  
  // Tests for methods
  boolean testIShapeArea(Tester t) {
    // checkInexact compares doubles
    return t.checkInexact(s1.area(), 900.0, 0.01)
        && t.checkInexact(c1.area(), 314.0, 0.1);
  }
  
  boolean testDistanceToOrigin(Tester t) {
    return t.checkInexact(s1.distanceToOrigin(), 0.0, 0.01)
        && t.checkInexact(s2.distanceToOrigin(), 5.0, 0.01)
        && t.checkInexact(s5.distanceToOrigin(), 70.71, 0.01)
        && t.checkInexact(s3.distanceToOrigin(), 44.72, 0.01)
        && t.checkInexact(c1.distanceToOrigin(), 40.0, 0.01)
        && t.checkInexact(c3.distanceToOrigin(), 74.40, 0.01);
  }
  
  boolean testGrow(Tester t) {
    return t.checkExpect(s1.grow(2), new Square(new CartPt(0, 0), 32, "red"))
        && t.checkExpect(c1.grow(3), new Circle(new CartPt(30, 40), 13, "red"));
  }
  
  boolean testIsBiggerThan(Tester t) {
    return t.checkExpect(s1.isBiggerThan(c1), true)
        && t.checkExpect(c1.isBiggerThan(s1), false);
  }
  
  boolean testContains(Tester t) {
    return t.checkExpect(s1.contains(new CartPt(3,2)), true)
        && t.checkExpect(s1.contains(new CartPt(33,2)), false)
        && t.checkExpect(s1.contains(new CartPt(30,30)), true)
        && t.checkExpect(s1.contains(new CartPt(30,33)), false)
        
        && t.checkExpect(c1.contains(new CartPt(31,41)), true)
        && t.checkExpect(c1.contains(new CartPt(40,40)), true)
        && t.checkExpect(c1.contains(new CartPt(30,50)), true)
        && t.checkExpect(c1.contains(new CartPt(40,50)), false);  //out x
  }
  
  // test the method area in the class Rect
  boolean testRectArea(Tester t) {
    return t.checkInexact(this.r1.area(), 600.0, 0.01);
  }

  // test the method distTo0 in the class Rect
  boolean testRectDistTo0(Tester t) {
    return t.checkInexact(this.r1.distanceToOrigin(), 70.71, 0.01)
        && t.checkInexact(this.r3.distanceToOrigin(), 44.72, 0.01);
  }

  // test the method grow in the class Rect
  boolean testRectGrow(Tester t) {
    return t.checkExpect(this.r1.grow(20), this.r2);
  }

  // test the method biggerThan in the class Rect
  boolean testRectBiggerThan(Tester t) {
    return t.checkExpect(this.r1.isBiggerThan(this.r2), false)
        && t.checkExpect(this.r2.isBiggerThan(this.r1), true)
        && t.checkExpect(this.r1.isBiggerThan(this.r1), false)
        && t.checkExpect(this.r3.isBiggerThan(this.r1), false);
  }

  // test the method contains in the class Rect
  boolean testRectContains(Tester t) {
    return t.checkExpect(this.r1.contains(new CartPt(100, 100)), false)
        && t.checkExpect(this.r2.contains(new CartPt(55, 60)), true);
  }
  
}