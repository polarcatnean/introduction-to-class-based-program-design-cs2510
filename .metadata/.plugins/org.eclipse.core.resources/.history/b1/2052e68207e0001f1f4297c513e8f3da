package practice;

import tester.Tester;

// a location on a river
class Location {
  int x;
  int y;
  String name;
  
  Location(int x, int y, String name) {
    this.x = x;
    this.y = y;
    this.name = name;
  }
  
  /* mmm() {
   * ...this.x...
   * ...this.y...
   * ...this.name...
   */
}

// the end of river
class Mouth {
  Location loc;
  IRiver river;
  
  Mouth(Location loc, IRiver river) {
    this.loc = loc;
    this.river = river;
  }
}

// a river system
interface IRiver {
  // nnn();
  
  // count how many sources feed this river system
  int countSources();
  
}

// the source of a river
class Source implements IRiver {
  Location loc;
  
  Source(Location loc) {
    this.loc = loc;
  }

  public int countSources() {
    return 1;
  }
  
  /* nnn() {
   * ...this.loc.mmm()...
   */
}

// a confluence of two rivers
class Confluence implements IRiver {
  Location loc;
  IRiver left;
  IRiver right;
  
  Confluence(Location loc, IRiver left, IRiver right) {
    this.loc = loc;
    this.left = left;
    this.right = right;
  }

  public int countSources() {
    return 1 + left.countSources() + right.countSources();
  }
  
  /* nnn() {
   * ...this.loc.mmm()...
   * ...this.left.nnn()...
   * ...this.right.nnn()...
   */
}

class RiverSystemExample {
  RiverSystemExample() {}
  
  Location lm = new Location(7, 5, "m");
  Location la = new Location(5, 5, "a");
  Location lb = new Location(3, 3, "b");
  Location ls = new Location(1, 1, "s");
  Location lt = new Location(1, 5, "t");
  Location lu = new Location(3, 7, "u");
  
  IRiver s = new Source(ls);
  IRiver t = new Source(lt);
  IRiver u = new Source(lu);
  
  IRiver b = new Confluence(lb, s, t);
  IRiver a = new Confluence(la, b, u);
  
  Mouth mouth1 = new Mouth(lm,a);

  boolean testCountSources(Tester t) {
    return t.checkExpect(s.countSources(), 1)
        && t.checkExpect(a.countSources(), 3)
        && t.checkExpect(b.countSources(), 2);
  }
}