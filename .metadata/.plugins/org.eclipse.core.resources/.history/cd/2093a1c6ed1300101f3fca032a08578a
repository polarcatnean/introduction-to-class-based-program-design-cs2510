package lecture19aliasing;
import tester.Tester;

// ALIASING concept (aka POINTER)
// Ability to “share” a single object between multiple data structures, 
// and access it via multiple names, is called aliasing.

// "intentional" equality, ie checking whether they're pointing at the same address
// eg, johndoe1 == johndoe3 returns true if they're the same address (same object)

class Person {
  String name;
  int phone;
  Person(String name, int phone) {
    this.name = name;
    this.phone = phone;
  }
  // Returns true when the given person has the same name and phone number as this person
  boolean samePerson(Person that) {
    return this.name.equals(that.name) && this.phone == that.phone;                                          
  }
  
  public boolean sameName(String name) {
    return this.name.equals(name);
  }
  
  public void changePhone(int newNum) {
    this.phone = newNum;
  }
}

interface ILoPerson {
  // returns true if this list contains a person with the given name
  boolean contains(String name);
  
  // returns phone number of the person with the given name, or -1 if person not found
  int findPhoneNum(String name);   
  
  // EFFECT: change the phone number for the person in this list with the given name
  void changePhone(String name, int newNum);  
}

class MtLoPerson implements ILoPerson {

  public boolean contains(String name) {
    return false;
  }

  public int findPhoneNum(String name) {
    return -1;
  }

  public void changePhone(String name, int newNum) {
    return; 
  }
  
}

class ConsLoPerson implements ILoPerson {
  Person first;
  ILoPerson rest;
  
  ConsLoPerson(Person first, ILoPerson rest) {
    this.first = first;  // set the pointer to "first"
    this.rest = rest;
  }

  public boolean contains(String name) {
    return this.first.sameName(name) || this.rest.contains(name);
  }

  public int findPhoneNum(String name) {
    if (this.first.sameName(name)) {
      return this.first.phone;
    }
    return this.rest.findPhoneNum(name);
  }

  public void changePhone(String name, int newNum) {
    if (this.first.sameName(name)) {
      this.first.changePhone(newNum);
    } else {
      this.rest.changePhone(name, newNum);
    }
  }
}

interface IPred<T> {
  boolean apply(T t);
}

class SameName implements IPred<Person> {
  String name;
  
  public boolean apply(Person other) {
    // TODO Auto-generated method stub
    return false;
  }
  
}

class SamePerson<T> implements IPred<T> {
  Person p;
  
  public boolean apply(lecture19aliasing.T t) {
    // TODO Auto-generated method stub
    return false;
  }
  
}

class Contains<T> implements IPred<T> {
  public boolean apply(lecture19aliasing.T t) {
    // TODO Auto-generated method stub
    return false;
  }
  
}

interface IList<T> {
  // Finds and returns the person in this list matching the given predicate,
  // or null if no such person is found
  T find(IPred<T> whichOne);
}

class MtList<T> implements IList<T> {
  public T find(IPred<T> whichOne) { return null;}
}

class ConsList<T> implements IList<T> {
  T first;
  IList<T> rest;
  
  ConsList(T first, IList<T> rest) {
    this.first = first;
    this.rest = rest;
  }

  public T find(IPred<T> whichOne) {
    if (whichOne.apply(first)) {
      return this.first;
    }
    return this.rest.find(whichOne);
  }
}


class ExamplePhoneLists {
  Person anne, bob, clyde, dana, eric, frank, gail, henry, irene, jenny;
  IList<Person> friends, family, work;
  
  // TEST FIXURE
  void initData() {
    anne = new Person("Anne", 1234);
    bob = new Person("Bob", 3456);
    clyde = new Person("Clyde", 6789);
    dana = new Person("Dana", 1357);
    eric = new Person("Eric", 12469);
    frank = new Person("Frank", 7294);
    gail = new Person("Gail", 9345);
    henry = new Person("Henry", 8602);
    irene = new Person("Irene", 91302);
    jenny = new Person("Jenny", 8675309);
    
    this.friends =
      new ConsList<Person>(this.anne, new ConsList<Person>(this.clyde,
        new ConsList<Person>(this.gail, new ConsList<Person>(this.frank,
          new ConsList<Person>(this.jenny, new MtList<Person>())))));
    
    this.family =
      new ConsList<Person>(this.anne, new ConsList<Person>(this.dana,
        new ConsList<Person>(this.frank, new MtList<Person>())));
    
    this.work =
      new ConsList<Person>(this.bob, new ConsList<Person>(this.clyde,
        new ConsList<Person>(this.dana, new ConsList<Person>(this.eric,
          new ConsList<Person>(this.henry, new ConsList<Person>(this.irene,
            new MtList<Person>()))))));
  }
  
  void testContainsName(Tester t) {
    this.initData();
    t.checkExpect(this.friends.contains("Anne"), true);
    t.checkExpect(this.family.contains("Zelda"), false);
    t.checkExpect(this.work.contains("Eric"), true);
  }
  
  void testFindPhoneNum(Tester t) {
    this.initData();
    t.checkExpect(this.friends.findPhoneNum("Gail"), 9345);
    t.checkExpect(this.work.findPhoneNum("Zelda"), -1);
    t.checkExpect(this.friends.findPhoneNum("Frank"), this.family.findPhoneNum("Frank"));
  }
  
  void testChangePhoneNum(Tester t) {
    this.initData();
    t.checkExpect(this.friends.findPhoneNum("Anne"), 1234);
    t.checkExpect(this.friends.findPhoneNum("Anne"), this.family.findPhoneNum("Anne"));
    t.checkExpect(this.anne.phone, 1234);
    
    this.anne.changePhone(1111);
    // Try to test ALL side effects
    t.checkExpect(this.friends.findPhoneNum("Anne"), 1111);  
    t.checkExpect(this.friends.findPhoneNum("Anne"), this.family.findPhoneNum("Anne"));  
    t.checkExpect(this.anne.phone, 1111);
  }
  
  void testAliasing(Tester t) {
    Person john1 = new Person("John", 12345);
    Person john2 = new Person("John", 12345);
    
    // Alias john1 to john3
    Person john3 = john1;
    
    t.checkExpect(john1.samePerson(john2), true); // "extensional" equality, just comparing if "data" is the same
    t.checkExpect(john1 == john2, false);         // "intentional" equality, ie same address / same object
    t.checkExpect(john1.samePerson(john3), true);
    t.checkExpect(john1 == john3, true);
    
    // Modify john1 
    john1.name = "Johnny";
    t.checkExpect(john1.samePerson(john2), false);
    t.checkExpect(john1.samePerson(john3), true);
    t.checkExpect(john1 == john2, false);
    t.checkExpect(john1 == john3, true);
    
  }
}