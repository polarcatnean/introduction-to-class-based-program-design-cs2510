import tester.Tester;

interface IPicture {
  // get overall width of this picture
  int getWidth();
  
  // count the number of single shapes involved in producing this image
  int countShapes();
  
  // TODO comboDepth
  // computes how deeply operations are nested in the construction of this picture
  
  // TODO mirror
  // leave the entire image unchanged, except Beside combos, which should have their two sub-images flipped
  
  // TODO pictureRecipe
  // takes an integer depth, and produces a String representing the contents of this picture
  // where the recipe for the picture has been expanded only depth times
  // In more detail: invoking pictureRecipe on a Combo produces its name if the given depth is less than or equal to 0, and the formula of its mixture (at that depth) otherwise.
}

class Shape implements IPicture {
  String kind;  // e.g., "circle" or "square"
  int size;
  
  Shape(String kind, int size) {
    this.kind = kind;
    this.size = size;
  }
 
  public int getWidth() {
    return size;
  }

  public int countShapes() {
    return 1;
  }
}

class Combo implements IPicture {
  String name;
  IOperation operation;
  
  Combo(String name, IOperation operation) {
    this.name = name;
    this.operation = operation;
  }

  public int getWidth() {
    return operation.getWidth();
  }

  public int countShapes() {
    return operation.countShapes();
  }
}


interface IOperation {
  int getWidth();
  int countShapes();
}

class Scale implements IOperation {
  IPicture pic;
  
  Scale(IPicture pic) {
    this.pic = pic;
  }

  public int getWidth() {
    return pic.getWidth() * 2;
  }

  public int countShapes() {
    return 1;
  }
}

class Beside implements IOperation {
  IPicture pic1;
  IPicture pic2;
  
  Beside(IPicture pic1, IPicture pic2) {
    this.pic1 = pic1;
    this.pic2 = pic2;
  }

  public int getWidth() {
    return pic1.getWidth() + pic2.getWidth();
  }

  public int countShapes() {
    return pic1.countShapes() + pic2.countShapes();
  }
}

class Overlay implements IOperation {
  IPicture topPic;
  IPicture bottomPic;
  
  Overlay(IPicture topPic, IPicture bottomPic) {
    this.topPic = topPic;
    this.bottomPic = bottomPic;
  }

  public int getWidth() {
    return Math.max(topPic.getWidth(), bottomPic.getWidth());
  }

  public int countShapes() {
    return topPic.countShapes() + bottomPic.countShapes();
  }
}

class ExamplesPicture {
  ExamplesPicture() {}
  
  IPicture circle = new Shape("circle", 20);
  IPicture square = new Shape("square", 30);
  
  IPicture bigCircle = new Combo("big circle", new Scale(this.circle));
  IPicture squareOnCircle = new Combo("square on circle", new Overlay(this.square, this.bigCircle));
  IPicture doubledSquareOnCircle = new Combo("doubled square on circle", new Beside(this.squareOnCircle, this.squareOnCircle));
  
  IPicture bigSquare = new Combo("big square", new Scale(this.square));
  IPicture squareInSquare = new Combo("square in square", new Overlay(square, bigSquare));
  IPicture doubledComboSquares = new Combo("two combo squares", new Beside(squareInSquare, squareInSquare));
  IPicture squareCircles = new Combo("squares and circles", new Beside(squareInSquare, squareOnCircle));
  IPicture threeSquares = new Combo("3 squares", new Beside(bigSquare, squareInSquare));
  
  
  boolean testGetWidth(Tester t) {
    return t.checkExpect(circle.getWidth(), 20)
        && t.checkExpect(bigCircle.getWidth(), 20 * 2)
        && t.checkExpect(squareOnCircle.getWidth(), 40)
        && t.checkExpect(doubledSquareOnCircle.getWidth(), 80)
        && t.checkExpect(squareCircles.getWidth(), 60 + 40);
  }
  
  boolean testCountShapes(Tester t) {
    return t.checkExpect(circle.countShapes(), 1)
        && t.checkExpect(bigCircle.countShapes(), 1)
        && t.checkExpect(squareOnCircle.countShapes(), 2)
        && t.checkExpect(threeSquares.countShapes(), 3)
        && t.checkExpect(squareCircles.countShapes(), 4);
  }
}