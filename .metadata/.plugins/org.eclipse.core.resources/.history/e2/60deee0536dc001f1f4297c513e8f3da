package note;
import tester.*;

//interface IPoint {
//  double distanceToOrigin();
//  double distance(IPoint p);
//}

//To represent a 2-d point by Cartesian coordinates
class CartPt {
  int x;
  int y;
  
  CartPt(int x, int y) {
   this.x = x;
   this.y = y;
  }
  
  public double distanceToOrigin() {
   return Math.sqrt((x * x) + (y * y));
  }
  
  public double distance(CartPt p) {
   return Math.sqrt(Math.pow((this.x - (p.x)), 2) + Math.pow((this.y - p.y), 2));
  }
}

//class PolarPt implements IPoint {
//  int r;
//  int theta;
//  
//  PolarPt(int r, int theta) {
//    this.r = r;
//    this.theta = theta;
//  }
//  
//  public double distanceToOrigin() {
//    return Math.abs(r);
//   }
//   
//  public double distance(IPoint  p) {
//    return Math.sqrt(Math.pow(this.r, 2) + Math.pow(p.r, 2) 
//                     - (2 * (this.r * p.r * Math.cos(this.theta - p.theta))));
//   }
//}

interface IShape {
  // interfaces define common functionality between classes
  // any class that implements an interface 
  // must also implement all of the methods that are defined in the interface 

  double area();   // contains only the signature of the method
                   // how these methods are implemented is 
                   // up to the individual class that implements the interface
  
  // we must avoid adding methods in the class that are not in the interface.
  
  
  // compute the distance from this shape to the origin
  double distanceToOrigin();
  
  //to increase the size of this shape by the given increment
  IShape grow(int inc);
  
  // is the area of this shape bigger than the area of the given shape?
  boolean isBiggerThan(IShape shape);
  
  // returns true if the given point is within the shape
  boolean contains(CartPt point);
}

class Square implements IShape {
  CartPt topLeft;
  int size;
  String colour;
  
  Square(CartPt topLeft, int size, String colour) {
    this.topLeft = topLeft;
    this.size = size;
    this.colour = colour;
  }
  
  // produce the area of this square
  public double area() {  // add "public" in front when a method is coming from an interface
    return size * size;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Square(topLeft, size + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public boolean contains(CartPt point) {
    return point.x >= topLeft.x && point.x <= topLeft.x + size
        && point.y >= topLeft.y && point.y <= topLeft.y + size;
  }
}

class Circle implements IShape {
  CartPt center;
  int radius;
  String colour;
  
  Circle(CartPt center, int radius, String colour) {
    this.center = center;
    this.radius = radius;
    this.colour = colour;
  }
  
 /* TEMPLATE
    FIELDS:
    ... this.center ...                    -- CartPt
    ... this.radius ...                    -- int
    ... this.color ...                     -- String
    METHODS
    ... this.area() ...                    -- double
    ... this.distanceToOrigin() ...        -- double
    METHODS ON FIELDS ----- NEW!
    ... this.center.distanceToOrigin() ... -- double
  */
  
  //produce the area of this circle
  public double area() {
    return Math.PI * radius * radius;
 }
  
  public double distanceToOrigin() {
    return center.distanceToOrigin() - radius;
  }
  
  public IShape grow(int inc) {
    return new Circle(center, radius + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public boolean contains(CartPt point) {
    return center.distance(point)<= radius;
  }
}

class Triangle implements IShape {
  CartPt topLeft;
  int base;
  int height;
  String colour;
  
  Triangle(CartPt topLeft, int base, int height, String colour) {
    this.topLeft = topLeft;
    this.base = base;
    this.height = height;
    this.colour = colour;
  }
  
  public double area() {
    return 0.5 * base * height;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Triangle(topLeft, base + inc, height + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  // stub
  public boolean contains(CartPt point) {
    return true;
  }
}

class Combo implements IShape {
  IShape a;
  IShape b;
  
  Combo(IShape a, IShape b) {
    this.a = a;
    this.b = b;
  }
  
  public double area() {
    return a.area() + b.area();
  }
  
  public double distanceToOrigin() {
    return Math.min(a.distanceToOrigin(), b.distanceToOrigin());
  }
  
  public IShape grow(int inc) {
    return new Combo(a.grow(inc), b.grow(inc));
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public boolean contains(CartPt point) {
    return a.contains(point) || b.contains(point);
  }
  
}

class ShapeUtil {
  ShapeUtil() {}
  
  double doubleTheArea(IShape shape) {  // it doesn't know yet which kind of shape we pass
    return shape.area() * 2;            // but it will figure out
  }
}

class ExamplesIShape {
  ExamplesIShape() {}
  
  ShapeUtil shapeUtil = new ShapeUtil();
  
  CartPt pt1 = new CartPt(0, 0);
  CartPt pt2 = new CartPt(3, 4);
  CartPt pt3 = new CartPt(7, 1);
  
  IShape s1 = new Square(new CartPt(0, 0), 30, "red");
  IShape s2 = new Square(new CartPt(3, 4), 30, "red");
  IShape s3 = new Square(new CartPt(20, 40), 10, "green");
  IShape s4 = new Square(new CartPt(50, 50), 50, "red");
  IShape s5 = new Square(new CartPt(50, 50), 30, "red");
  
  IShape c1 = new Circle(new CartPt(30, 40), 10, "red");
  IShape c2 = new Circle(new CartPt(50, 50), 30, "red");
  IShape c3 = new Circle(new CartPt(30, 100), 30, "blue");
  
  IShape t1 = new Triangle(new CartPt(0, 0), 10, 5, "red");
  
  IShape combo1 = new Combo(c2, s4);
  
  // Tests for CartPt
  boolean testDistToOrigin(Tester t) {
    return t.checkInexact(this.pt1.distanceToOrigin(), 0.0, 0.001) 
        && t.checkInexact(this.pt2.distanceToOrigin(), 5.0, 0.001);
  }
  
  boolean testDistance(Tester t) {
    return t.checkInexact(new CartPt(0, 0).distance(new CartPt(1, 1)), 1.414, 0.01)
        && t.checkInexact(new CartPt(4, 8).distance(new CartPt(1, 4)), 5.0, 0.01);
  }
  
  // Tests for methods
  boolean testIShapeArea(Tester t) {
    // checkInexact compares doubles
    return t.checkInexact(s1.area(), 900.0, 0.01)
        && t.checkInexact(c1.area(), 314.0, 0.1)
        && t.checkInexact(t1.area(), 25.0, 0.01);
  }
  
  boolean testShapeUtil(Tester t) {
    return t.checkInexact(shapeUtil.doubleTheArea(c1), 628.0, 0.01);
  }
  
  boolean testDistanceToOrigin(Tester t) {
    return t.checkInexact(s1.distanceToOrigin(), 0.0, 0.01)
        && t.checkInexact(s2.distanceToOrigin(), 5.0, 0.01)
        && t.checkInexact(s5.distanceToOrigin(), 70.71, 0.01)
        && t.checkInexact(s3.distanceToOrigin(), 44.72, 0.01)
        && t.checkInexact(c1.distanceToOrigin(), 40.0, 0.01)
        && t.checkInexact(c3.distanceToOrigin(), 74.40, 0.01);
  }
  
  boolean testGrow(Tester t) {
    return t.checkExpect(s1.grow(2), new Square(new CartPt(0, 0), 32, "red"))
        && t.checkExpect(c1.grow(3), new Circle(new CartPt(30, 40), 13, "red"));
  }
  
  boolean testIsBiggerThan(Tester t) {
    return t.checkExpect(s1.isBiggerThan(c1), true)
        && t.checkExpect(c1.isBiggerThan(s1), false);
  }
  
  boolean testContains(Tester t) {
    return t.checkExpect(s1.contains(new CartPt(3,2)), true)
        && t.checkExpect(s1.contains(new CartPt(33,2)), false)
        && t.checkExpect(s1.contains(new CartPt(30,30)), true)
        && t.checkExpect(s1.contains(new CartPt(30,33)), false)
        
        && t.checkExpect(c1.contains(new CartPt(31,41)), true)
        && t.checkExpect(c1.contains(new CartPt(40,40)), true)
        && t.checkExpect(c1.contains(new CartPt(30,50)), true)
        && t.checkExpect(c1.contains(new CartPt(40,50)), false);  //out x
  }
  
  boolean testForCombo(Tester t) {
    return t.checkInexact(combo1.area(), c2.area() + s4.area(), 0.01)
        && t.checkInexact(combo1.distanceToOrigin(), c2.distanceToOrigin(), 0.01)
        && t.checkExpect(combo1.grow(10), new Combo((new Circle(new CartPt(50, 50), 40, "red")),
                                                    (new Square(new CartPt(50, 50), 60, "red"))))
        && t.checkExpect(combo1.contains(pt1), false);
  }
}