package note;

import tester.Tester;

class Book {
  String title;
  String author;
  int price;
  
  Book(String title, String author, int price) {
    this.title = title;
    this.author = author;
    this.price = price;
  }
}

interface ILoBook {  // ListOfBook
  // count the number of books in the list
  int count();
  
  // count the total price of all the books in the list
  int totalPrice();
  
  // filter and return a list of books under a certain price
  ILoBook cheaperThan(int price);
  
  // insert a book in the list. The book with lower price goes in front
  ILoBook insert(Book b);
  
  // sort books in the list by price, ascending
  ILoBook sortByPrice();
}

class MtLoBook implements ILoBook {  // empty LoB
  MtLoBook() {}
  
  public int count() {
    return 0;
  }
  
  public int totalPrice() {
    return 0;
  }
  
  public ILoBook cheaperThan(int price) {
    return this;   // or return new MtLoBook(); works too
  }
  
  public ILoBook insert(Book b) {
    return new ConsLoBook(b, this);
  }
  
  public ILoBook sortByPrice() {
    return this;
  }
  
}

class ConsLoBook implements ILoBook {   // cons + LoB
  Book first;
  ILoBook rest;
  
  ConsLoBook(Book first, ILoBook rest) {
    this.first = first;
    this.rest = rest;
  }
  /*
    TEMPLATE:
    ---------
    Fields:
    ... this.first ...                             -- Book
    ... this.rest ...                              -- ILoBook
    Methods:
    ... this.count() ...                           -- int
    ... this.totalPrice() ...                      -- double
    ... this.cheaperThan(int price) ...            -- ILoBook
    Methods for Fields:
    ... this.rest.count() ...                      -- int
    ... this.rest.totalPrice() ...                 -- double
    ... this.rest.cheaperThan(int price) ...       -- ILoBook
  */
  
  // methods
  public int count() {
    return 1 + rest.count();
  }
  
  public int totalPrice() {
    return first.price + rest.totalPrice();
  }
  
  public ILoBook cheaperThan(int price) {
    if (this.first.price < price) {
      return new ConsLoBook(this.first, this.rest.cheaperThan(price));
    }
    else {
      return this.rest.cheaperThan(price);
    }
  }
  
  public ILoBook insert(Book b) {
    if (b.price <= this.first.price) {
      return new ConsLoBook(b, this);
    }
    else {
      return new ConsLoBook(this.first, this.rest.insert(b));
    }
  }
  
  public ILoBook sortByPrice() {
    return this.rest.sortByPrice().insert(this.first);   
           // ASSUME <rest list> is sorted:: trust the natural recursion
  }
}

class ILoBookExample {
  ILoBookExample() {}
  
  Book hp1 = new Book("HP1", "JKR", 20);
  Book hp2 = new Book("HP2", "JKR", 30);
  Book hp3 = new Book("HP3", "JKR", 40);
  Book hp4 = new Book("HP4", "JKR", 50);
  
  ILoBook emptyList = new MtLoBook();
  ILoBook hpList1 = new ConsLoBook(hp1, emptyList);
  ILoBook hpList3 = new ConsLoBook(hp1, 
                                   new ConsLoBook(hp2, 
                                                  new ConsLoBook(hp3, emptyList)));
  ILoBook hpList4 = new ConsLoBook(hp1, hpList3);
  ILoBook hpListA = new ConsLoBook(hp1, 
                                   new ConsLoBook(hp2, 
                                                  new ConsLoBook(hp4, emptyList)));
  ILoBook hpListB = new ConsLoBook(hp1, 
                                   new ConsLoBook(hp2, 
                                                  new ConsLoBook(hp3, new ConsLoBook(hp4, emptyList))));
  ILoBook hpListC = new ConsLoBook(hp3, 
                                   new ConsLoBook(hp2, 
                                                 new ConsLoBook(hp4, new ConsLoBook(hp1, emptyList))));

  // Test for methods
  boolean testILoBookCount(Tester t) {
    return t.checkExpect(hpList3.count(), 3)
        && t.checkExpect(hpList1.count(), 1)
        && t.checkExpect(emptyList.count(), 0)
        && t.checkExpect(hpList4.count(), 4);
  }
  
  boolean testILoBookTotalPrice(Tester t) {
    return t.checkExpect(emptyList.totalPrice(), 0)
        && t.checkExpect(hpList3.totalPrice(), 90)
        && t.checkExpect(hpList1.totalPrice(), 20)
        && t.checkExpect(hpList4.totalPrice(), 110);
  }

  boolean testILoBookCheaperThan(Tester t) {
    return t.checkExpect(emptyList.cheaperThan(20), emptyList)
        && t.checkExpect(hpList1.cheaperThan(10), emptyList)
        && t.checkExpect(hpList1.cheaperThan(30), hpList1)
        && t.checkExpect(hpList3.cheaperThan(35), new ConsLoBook(hp1, new ConsLoBook(hp2, emptyList)))
        && t.checkExpect(hpList3.cheaperThan(50), hpList3);
  }
  
  boolean testInsert(Tester t) {
    return t.checkExpect(emptyList.insert(hp1), hpList1)
        && t.checkExpect(hpList1.insert(hp2), new ConsLoBook(hp1, (new ConsLoBook(hp2, emptyList))))
        && t.checkExpect(hpList3.insert(hp1), hpList4)
        && t.checkExpect(hpListA.insert(hp3), hpListB);
  }
  
  boolean testsortByPrice(Tester t) {
    return t.checkExpect(emptyList.sortByPrice(), emptyList)
        && t.checkExpect(hpList1.sortByPrice(), hpList1)
        && t.checkExpect(hpList4.sortByPrice(), hpList4)   // already sorted 
        && t.checkExpect(hpListC.sortByPrice(), hpListB);
  }
}