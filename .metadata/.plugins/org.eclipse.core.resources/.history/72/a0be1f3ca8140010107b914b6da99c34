package lab8.Bank;

import tester.*;

// Bank Account Examples and Tests
public class Examples {
  
  public Examples() {
    reset();
  }

  Account check1, savings1, credit1;
  Bank bank1;
  ILoA loa1;

  // Initializes accounts to use for testing with effects.
  // We place inside reset() so we can "reuse" the accounts
  public void reset() {

    // Initialize the account examples
    check1 = new Checking(1, 100, "First Checking Account", 20);
    savings1 = new Savings(4, 200, "First Savings Account", 2.5);
    credit1 = new Credit(2, 300, "First Credit Account", 1000, 20.0);
    
    loa1 = new ConsLoA(check1, new ConsLoA(savings1, new ConsLoA(credit1, new MtLoA())));
    
    bank1 = new Bank("Bank1");
  }

  void testWithdrawAccount(Tester t) {
    reset();
    bank1.accounts = loa1;
    bank1.withdraw(50, 1);
    t.checkExpect(check1.balance, 50);
    t.checkExpect(bank1.accounts, new ConsLoA(new Checking(1, 50, "First Checking Account", 20), new ConsLoA(savings1, new ConsLoA(credit1, new MtLoA()))));
    
    bank1.withdraw(40, 4);
    bank1.withdraw(20, 2);
    t.checkExpect(bank1.accounts, 
        new ConsLoA(new Checking(1, 50, "First Checking Account", 20), 
            new ConsLoA(new Savings(4, 160, "First Savings Account", 2.5), 
            new ConsLoA(new Credit(2, 320, "First Credit Account", 1000, 20.0), new MtLoA()))));
  }
  
  void testDepositAccount(Tester t) {
    reset();
    bank1.accounts = loa1;
    bank1.deposit(50, 1);
    t.checkExpect(check1.balance, 150);
    t.checkExpect(bank1.accounts, new ConsLoA(new Checking(1, 150, "First Checking Account", 20), new ConsLoA(savings1, new ConsLoA(credit1, new MtLoA()))));
    
    bank1.deposit(40, 4);
    bank1.deposit(20, 2);
    t.checkExpect(bank1.accounts, 
        new ConsLoA(new Checking(1, 150, "First Checking Account", 20), 
            new ConsLoA(new Savings(4, 240, "First Savings Account", 2.5), 
            new ConsLoA(new Credit(2, 280, "First Credit Account", 1000, 20.0), new MtLoA()))));
  }
  
  void testAddRemoveAccount(Tester t) {
    reset();
    bank1.add(credit1);
    t.checkExpect(bank1.accounts, new ConsLoA(credit1, new MtLoA()));
    
    bank1.add(savings1);
    bank1.add(check1);
    t.checkExpect(bank1.accounts, this.loa1);
    
    bank1.removeAccount(4);
    t.checkExpect(bank1.accounts, new ConsLoA(check1, new ConsLoA(credit1, new MtLoA())));
  }
  
  // Tests the exceptions we expect to be thrown when
  // performing an "illegal" action.
  public void testExceptions(Tester t) {
    reset();
    t.checkException("Test for invalid Checking withdraw",
        new RuntimeException("1000 is not available"), this.check1, "withdraw", 1000);
    t.checkException("Test for invalid savings withdraw",
        new RuntimeException("Cannot withdraw more than the current balance (200)"), this.savings1, "withdraw", 1000);
    t.checkException("Test for invalid credit withdraw",
        new RuntimeException("The withdrawal amount exceeds the maximum credit."), this.credit1, "withdraw", 1000);
  }
  
  void testWithDraw(Tester t) {
    reset();
    t.checkExpect(check1.withdraw(25), 75);
    t.checkExpect(check1, new Checking(1, 75, "First Checking Account", 20));
    t.checkExpect(savings1.withdraw(50), 150);
    t.checkExpect(savings1.balance, 150);
    t.checkExpect(credit1.withdraw(100), 400);
    t.checkExpect(credit1.balance, 400);
  }

  // Test the deposit method(s)
  public void testDeposit(Tester t) {
    reset();
    t.checkExpect(check1.deposit(100), 200);
    t.checkExpect(check1.balance, 200);
    t.checkExpect(savings1.deposit(100), 300);
    t.checkExpect(savings1.balance, 300);
    t.checkExpect(credit1.deposit(100), 200);
    t.checkExpect(credit1.balance, 200);
  }
}
