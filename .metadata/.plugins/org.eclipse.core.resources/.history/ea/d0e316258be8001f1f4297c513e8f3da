import tester.Tester;

class CartPt {
  double x;
  double y;
  
  CartPt(double x, double y) {
   this.x = x;
   this.y = y;
  }
  
  public double distanceToOrigin() {
   return Math.sqrt((x * x) + (y * y));
  }

  public double distance(IPoint p) {
    return Math.sqrt(Math.pow((this.x - (other.x)), 2) + Math.pow((this.y - other.y), 2));
  }
}

interface IShape {
  double area();
  double distanceToOrigin();
  IShape grow(int inc);
  boolean isBiggerThan(IShape shape);
  boolean contains(CartPt point)
}

abstract class AShape implements IShape{  // for Abstraction, can partially implement some of the interface
  CartPt location;
  String colour;
  
  AShape(CartPt location, String colour) {
    this.location = location;
    this.colour = colour;
  }
}

class Circle extends AShape {  // extends = inherit or get everything inside AShape
  super(center, colour);  // super refers to the constructor of the abstract class
  int radius;
  
  Circle(CartPt center, int radius, String colour) {
    this.radius = radius;
  }
  
  public double area() {
    return Math.PI * radius * radius;
 }
  
  public double distanceToOrigin() {
    return center.distanceToOrigin() - radius;
  }
  
  public IShape grow(int inc) {
    return new Circle(center, radius + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public boolean contains(CartPt point) {
    return center.distance(point)<= radius;
  }
}

class Square extends AShape {
  super(topLeft, colour);
  int size;
  
  Square(CartPt topLeft, int size, String colour) {
    this.topLeft = topLeft;
    this.size = size;
    this.colour = colour;
  }
  
  public double area() { 
    return size * size;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Square(topLeft, size + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }

  public boolean contains(CartPt point) {
    return point.x >= topLeft.x && point.x <= topLeft.x + size
        && point.y >= topLeft.y && point.y <= topLeft.y + size;
  }
}

class Rect extends AShape {
  super(topLeft, colour);
  int width;
  int height;
  
  Rect(CartPt topLeft, int width, int height, String colour) {
    this.topLeft = topLeft;
    this.width = width;
    this.height = height;
    this.colour = colour;
  }
  
  public double area() { 
    return width * height;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Rect(topLeft, width + inc, height + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }

  public boolean contains(CartPt point) {
    return point.x >= topLeft.x && point.x <= topLeft.x + width
        && point.y >= topLeft.y && point.y <= topLeft.y + height;
  }
}

class ExamplesIShape {
  ExamplesIShape() {}
  
  CartPt pt1 = new CartPt(0, 0);
  CartPt pt2 = new CartPt(3, 4);
  CartPt pt3 = new CartPt(7, 1);
  
  IShape s1 = new Square(new CartPt(0, 0), 30, "red");
  IShape s2 = new Square(new CartPt(3, 4), 30, "red");
  IShape s3 = new Square(new CartPt(20, 40), 10, "green");
  IShape s4 = new Square(new CartPt(50, 50), 50, "red");
  IShape s5 = new Square(new CartPt(50, 50), 30, "red");
  
  IShape c1 = new Circle(new CartPt(30, 40), 10, "red");
  IShape c2 = new Circle(new CartPt(50, 50), 30, "red");
  IShape c3 = new Circle(new CartPt(30, 100), 30, "blue");
  
  IShape t1 = new Triangle(new CartPt(0, 0), 10, 5, "red");
  
  IShape combo1 = new Combo(c2, s4);
  
  // Tests for CartPt
  boolean testDistToOrigin(Tester t) {
    return t.checkInexact(this.pt1.distanceToOrigin(), 0.0, 0.001) 
        && t.checkInexact(this.pt2.distanceToOrigin(), 5.0, 0.001);
  }
  
  boolean testDistance(Tester t) {
    return t.checkInexact(new CartPt(0, 0).distance(new CartPt(1, 1)), 1.414, 0.01)
        && t.checkInexact(new CartPt(4, 8).distance(new CartPt(1, 4)), 5.0, 0.01);
  }
  
  // Tests for methods
  boolean testIShapeArea(Tester t) {
    // checkInexact compares doubles
    return t.checkInexact(s1.area(), 900.0, 0.01)
        && t.checkInexact(c1.area(), 314.0, 0.1)
        && t.checkInexact(t1.area(), 25.0, 0.01);
  }
  
  boolean testDistanceToOrigin(Tester t) {
    return t.checkInexact(s1.distanceToOrigin(), 0.0, 0.01)
        && t.checkInexact(s2.distanceToOrigin(), 5.0, 0.01)
        && t.checkInexact(s5.distanceToOrigin(), 70.71, 0.01)
        && t.checkInexact(s3.distanceToOrigin(), 44.72, 0.01)
        && t.checkInexact(c1.distanceToOrigin(), 40.0, 0.01)
        && t.checkInexact(c3.distanceToOrigin(), 74.40, 0.01);
  }
  
  boolean testGrow(Tester t) {
    return t.checkExpect(s1.grow(2), new Square(new CartPt(0, 0), 32, "red"))
        && t.checkExpect(c1.grow(3), new Circle(new CartPt(30, 40), 13, "red"));
  }
  
  boolean testIsBiggerThan(Tester t) {
    return t.checkExpect(s1.isBiggerThan(c1), true)
        && t.checkExpect(c1.isBiggerThan(s1), false);
  }
  
  boolean testContains(Tester t) {
    return t.checkExpect(s1.contains(new CartPt(3,2)), true)
        && t.checkExpect(s1.contains(new CartPt(33,2)), false)
        && t.checkExpect(s1.contains(new CartPt(30,30)), true)
        && t.checkExpect(s1.contains(new CartPt(30,33)), false)
        
        && t.checkExpect(c1.contains(new CartPt(31,41)), true)
        && t.checkExpect(c1.contains(new CartPt(40,40)), true)
        && t.checkExpect(c1.contains(new CartPt(30,50)), true)
        && t.checkExpect(c1.contains(new CartPt(40,50)), false);  //out x
  }
 
}