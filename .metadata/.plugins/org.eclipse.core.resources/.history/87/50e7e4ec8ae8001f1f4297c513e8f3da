import tester.Tester;

class CartPt {
  double x;
  double y;
  
  CartPt(double x, double y) {
   this.x = x;
   this.y = y;
  }
  
  public double distanceToOrigin() {
   return Math.sqrt((x * x) + (y * y));
  }

  public double distance(IPoint p) {
    return Math.sqrt(Math.pow((this.x - (other.x)), 2) + Math.pow((this.y - other.y), 2));
  }
}


interface IShape {
  double area();
  double distanceToOrigin();
  IShape grow(int inc);
  boolean isBiggerThan(IShape shape);
  boolean contains(CartPt point)
}

class Circle implements IShape {
  CartPt center;
  int radius;
  String colour;
  
  Circle(CartPt center, int radius, String colour) {
    this.center = center;
    this.radius = radius;
    this.colour = colour;
  }
  
  public double area() {
    return Math.PI * radius * radius;
 }
  
  public double distanceToOrigin() {
    return center.distanceToOrigin() - radius;
  }
  
  public IShape grow(int inc) {
    return new Circle(center, radius + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }
  
  public boolean contains(CartPt point) {
    return center.distance(point)<= radius;
  }
}

class Square implements IShape {
  CartPt topLeft;
  int size;
  String colour;
  
  Square(CartPt topLeft, int size, String colour) {
    this.topLeft = topLeft;
    this.size = size;
    this.colour = colour;
  }
  
  public double area() { 
    return size * size;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Square(topLeft, size + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }

  public boolean contains(CartPt point) {
    return point.x >= topLeft.x && point.x <= topLeft.x + size
        && point.y >= topLeft.y && point.y <= topLeft.y + size;
  }
}

class Rect implements IShape {
  CartPt topLeft;
  int width;
  int height;
  String colour;
  
  Rect(CartPt topLeft, int width, int height, String colour) {
    this.topLeft = topLeft;
    this.width = width;
    this.height = height;
    this.colour = colour;
  }
  
  public double area() { 
    return width * height;
  }
  
  public double distanceToOrigin() {
    return topLeft.distanceToOrigin();
  }
  
  public IShape grow(int inc) {
    return new Rect(topLeft, width + inc, height + inc, colour);
  }
  
  public boolean isBiggerThan(IShape shape) {
    return this.area() > shape.area();
  }

  public boolean contains(CartPt point) {
    return point.x >= topLeft.x && point.x <= topLeft.x + width
        && point.y >= topLeft.y && point.y <= topLeft.y + height;
  }
}

