package lecture20mutableDS;
import tester.Tester;

class Person {
  String name;
  int phone;
  Person(String name, int phone) {
    this.name = name;
    this.phone = phone;
  }
  // Returns true when the given person has the same name and phone number as this person
  boolean samePerson(Person that) {
    return this.name.equals(that.name) && this.phone == that.phone;                                          
  }
  
  public boolean sameName(String name) {
    return this.name.equals(name);
  }
  
  public void changePhone(int newNum) {
    this.phone = newNum;
  }
}

interface ILoPerson {
  //returns true if this list contains a person with the given name
  boolean contains(String name);

  // returns phone number of the person with the given name, or -1 if person not
  // found
  int findPhoneNum(String name);

  // EFFECT: change the phone number for the person in this list with the given
  // name
  void changePhone(String name, int newNum); 
  
  // EFFECT: remove the person with given name from the list
  void removePerson(String name);
  void removePersonHelper(String name, ConsLoPerson prev);
}

class MtLoPerson implements ILoPerson {
  public boolean contains(String name) {
    return false;
  }

  public int findPhoneNum(String name) {
    return -1;
  }

  public void changePhone(String name, int newNum) {
    return; 
  }

  public void removePerson(String name) {
    return;
  }

  public void removePersonHelper(String name, ConsLoPerson prev) {
    return;
  }
}

class ConsLoPerson implements ILoPerson {
  Person first;
  ILoPerson rest;
  
  ConsLoPerson(Person first, ILoPerson rest) {
    this.first = first;  
    this.rest = rest;
  }
  
  public boolean contains(String name) {
    return this.first.sameName(name) || this.rest.contains(name);
  }

  public int findPhoneNum(String name) {
    if (this.first.sameName(name)) {
      return this.first.phone;
    }
    return this.rest.findPhoneNum(name);
  }

  public void changePhone(String name, int newNum) {
    if (this.first.sameName(name)) {
      this.first.changePhone(newNum);
    } else {
      this.rest.changePhone(name, newNum);
    }
  }
  
  public void removePerson(String name) {
    this.rest.removePersonHelper(name, this);
  }

  public void removePersonHelper(String name, ConsLoPerson prev) {
    if (this.first.sameName(name)) {
      prev.rest = this.rest;  // change the pointer to skip this person
    }
    else { 
      this.rest.removePerson(name);
    }
  }
}

class ExamplePhoneLists {
  Person anne, bob, clyde, dana, eric, frank, gail, henry, irene, jenny;
  ILoPerson friends, family, work;
  ILoPerson list1, list2;
  
  // TEST FIXURE
  void initData() {
    anne = new Person("Anne", 1234);
    bob = new Person("Bob", 3456);
    clyde = new Person("Clyde", 6789);
    dana = new Person("Dana", 1357);
    eric = new Person("Eric", 12469);
    frank = new Person("Frank", 7294);
    gail = new Person("Gail", 9345);
    henry = new Person("Henry", 8602);
    irene = new Person("Irene", 91302);
    jenny = new Person("Jenny", 8675309);
    
    this.friends =
      new ConsLoPerson(this.anne, new ConsLoPerson(this.clyde,
        new ConsLoPerson(this.gail, new ConsLoPerson(this.frank,
          new ConsLoPerson(this.jenny, new MtLoPerson())))));
    
    this.family =
      new ConsLoPerson(this.anne, new ConsLoPerson(this.dana,
        new ConsLoPerson(this.frank, new MtLoPerson())));
    
    this.work =
      new ConsLoPerson(this.bob, new ConsLoPerson(this.clyde,
        new ConsLoPerson(this.dana, new ConsLoPerson(this.eric,
          new ConsLoPerson(this.henry, new ConsLoPerson(this.irene,
            new MtLoPerson()))))));
    
    this.list1 = new ConsLoPerson(this.anne, 
                       new ConsLoPerson(this.clyde, 
                       new ConsLoPerson(this.henry, new MtLoPerson())));
    this.list2 = new ConsLoPerson(this.anne, 
                       new ConsLoPerson(this.clyde, 
                       new ConsLoPerson(this.henry, new MtLoPerson())));
  }

  // Tests removing the first person in a list
//  void testRemoveFirstPerson(Tester t) {
//    this.initData();
//    // Check initial conditions
//    t.checkExpect(list1.contains("Anne"), true);
//    t.checkExpect(list2.contains("Anne"), true);
//    // Modify list1
//    list1.removePerson("Anne");
//    // Check that list1 has been modified...
//    t.checkExpect(list1.contains("Anne"), false);
//    // ...but that list2 has not
//    t.checkExpect(list2.contains("Anne"), true);
//  }
  
  //Tests removing a middle person in a list
  void testRemoveMiddlePerson(Tester t) {
   this.initData();
   // Check initial conditions
   t.checkExpect(list1.contains("Clyde"), true);
   t.checkExpect(list2.contains("Clyde"), true);
   // Modify list1
   list1.removePerson("Clyde");
   // Check that list1 has been modified...
   t.checkExpect(list1.contains("Clyde"), false);
   // ...but that list2 has not
   t.checkExpect(list2.contains("Clyde"), true);
  }
  
  //Tests removing the last person in a list
  void testRemoveLastPerson(Tester t) {
   this.initData();
   // Check initial conditions
   t.checkExpect(list1.contains("Henry"), true);
   t.checkExpect(list2.contains("Henry"), true);
   // Modify list1
   list1.removePerson("Henry");
   // Check that list1 has been modified...
   t.checkExpect(list1.contains("Henry"), false);
   // ...but that list2 has not
   t.checkExpect(list2.contains("Henry"), true);
  }
  
}